<?xml version="1.0"?>
<!DOCTYPE sailpoint PUBLIC "sailpoint.dtd" "sailpoint.dtd">
<sailpoint>
	<Rule language="beanshell" name="OUD Hash Password" type="BeforeProvisioning">
		<Source><![CDATA[
	
	import java.security.SecureRandom;
	import java.text.MessageFormat;
	import java.util.ArrayList;
	import java.util.Base64;
	import java.util.List;	
	import org.apache.commons.codec.digest.DigestUtils;
	import org.apache.commons.lang.ArrayUtils;
	import org.apache.commons.logging.Log;
	import org.apache.commons.logging.LogFactory;
	import sailpoint.object.*;
	import sailpoint.object.ProvisioningPlan.AccountRequest;
	import sailpoint.object.ProvisioningPlan.AttributeRequest;
	import sailpoint.object.ProvisioningPlan.Operation;
	import sailpoint.object.ProvisioningPlan;
	import sailpoint.tools.*;
	
	/*
	 * Hash password using SHA-1 and a randomly generated salt.  
	 *  Input: String of the plain-text password from the provisioning plan.
	 *  Output: String of the hashed password.
	 */
	public static String hashPassword ( String password ) {
		
		SecureRandom random = new SecureRandom();
		byte[] salt = new byte[ 10 ];
		random.nextBytes(salt);
		
		String hashedPassword = "{SSHA}" + Base64.getEncoder().encodeToString( ArrayUtils.addAll( DigestUtils.sha( ArrayUtils.addAll( password.getBytes(), salt ) ), salt ) );
		
		return hashedPassword;
	}
	
	/*
	 * Main entry point.
	 */
	if ( plan != null ) {
		
		AccountRequest accountRequests = plan.getAccountRequests();
		
		for ( AccountRequest accountRequest : accountRequests ) {
		
			if ( accountRequest != null ) {
			
				AttributeRequest attributeRequest = accountRequest.getAttributeRequest( "orclCommonAttribute" );
				
				if ( attributeRequest != null ) {
				
					String passwordValue = attributeRequest.getValue();
					
					String hashedPasswordValue = hashPassword ( passwordValue );
					
					attributeRequest.setValue( hashedPasswordValue );
				
				}
			}
		}
	}
		]]></Source>
	</Rule>
	
</sailpoint>	